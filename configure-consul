#!/usr/bin/env ruby
require 'fileutils'
require 'ipaddr'
require 'json'
require 'net/http'
require 'optparse'
require 'ostruct'

options = OpenStruct.new
options.datacenter = 'dc1'

OptionParser.new { |opts|
  opts.on('--bootstrap', 'Bootstrap the Consul agent') do
    options.bootstrap = true
  end

  opts.on('--client', 'Configure the Consul agent as a client') do
    options.client = true
  end

  opts.on('--join HOST', 'Join this Consul agent to an existing cluster') do |host|
    options.join = host
  end

  opts.on('--block BLOCK', 'Bind to IP address in a particular block') do |block|
    options.block = block
  end

  opts.on('--dc DC', 'Datacenter to join') do |dc|
    options.datacenter = dc
  end
}.parse!

# TODO Should rejoin after leave be enabled by default?
config = {
  datacenter: options.datacenter,
  data_dir: '/var/lib/consul',
  log_level: 'INFO'
}

if options.client
  if options.bootstrap
    $stderr.puts 'The --bootstrap and --client options cannot be combined'
    exit 1
  end
else
  config.merge!(
    server: true,
    client_addr: '0.0.0.0',
    ui_dir: '/usr/share/consul/ui'
  )
end

# Generally, Consul is able to determine the private network to bind to itself. However,
# the networking config with Vagrant presents two private networks to Consul, so we must
# disambiguate
if options.block
  block = IPAddr.new(options.block)

  `ip addr show up`.each_line do |line|
    if line =~ /inet (([.\d]+)\/[.\d]+)/ && block.include?($1)
      config[:bind_addr] = $2
      break
    end
  end

  unless config[:bind_addr]
    $stderr.puts 'Could not obtain IP address in desired range'
    exit 1
  end
end

FileUtils.rm_r(Dir.glob('/var/lib/consul/*'))

`stop consul`

File.write('/etc/consul/conf.d/common.json', JSON.dump(config))

if options.bootstrap
  config = {
    bootstrap: true
  }

  File.write('/etc/consul/conf.d/bootstrap.json', JSON.dump(config))
end

`start consul`

if options.bootstrap
  until `consul members`
    sleep 1
  end

  FileUtils.rm('/etc/consul/conf.d/bootstrap.json')
end

if options.join
  loop do
    sleep 1
    puts `consul join #{options.join}`

    break if $? == 0
  end
end

puts `consul members`
