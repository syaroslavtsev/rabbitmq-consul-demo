#!/usr/bin/env ruby
require 'base64'
require 'json'
require 'net/http'
require 'optparse'
require 'ostruct'


class ConsulClient
  def initialize
    @conn = Net::HTTP.start('localhost', 8500)
  end

  def [](name)
    response = @conn.send_request('GET', "/v1/kv/#{name}")

    keys = JSON.load(response.body)
    Base64.decode64(keys.first['Value'])
  end

  def cas_key(name, value, index)
    response = @conn.send_request('PUT', "/v1/kv/#{name}?cas=#{index}", value)
    JSON.load(response.body)
  end

  def nodes_with_service(name)
    response = @conn.send_request('GET', "/v1/health/service/#{name}?passing")
    entries = JSON.load(response.body)

    entries.map do |entry|
      entry['Node']['Node']
    end
  end
end


options = OpenStruct.new
options.service = 'rabbitmq'
options.cluster_name = 'bunnies'

OptionParser.new { |opts|
  opts.on('--service', 'Consul service to advertise RabbitMQ') do |service|
    options.service = service
  end

  opts.on('--cluster-name', 'Name of the RabbitMQ cluster') do |name|
    options.cluster_name = name
  end
}.parse!

cookie = File.read('/var/lib/rabbitmq/.erlang.cookie')

initial_node = false

client = ConsulClient.new

if client.cas_key("service/#{options.service}/cookie", cookie, 0)
  puts 'This node is the initial node of the cluster'
  initial_node = true
else
  puts 'This node will join the existing cluster'
  cookie = client["service/#{options.service}/cookie"]
end

config = {
  service: {
    name: options.service,
    port: 5672,
    check: {
      script: "/usr/local/bin/check-rabbitmq-cluster #{options.cluster_name}",
      interval: '10s'
    }
  }
}

File.write('/etc/consul/conf.d/service.json', JSON.dump(config))

puts `reload consul`

if initial_node
  puts `rabbitmqctl set_cluster_name #{options.cluster_name}`
else
  `service rabbitmq-server stop`
  File.write('/var/lib/rabbitmq/.erlang.cookie', cookie)
  `service rabbitmq-server start`

  hostname = client.nodes_with_service(options.service).sample

  puts `rabbitmqctl stop_app`
  puts `rabbitmqctl join_cluster --ram rabbit@#{hostname}`
  puts `rabbitmqctl update_cluster_nodes rabbit@#{hostname}`
  puts `rabbitmqctl start_app`
end

puts `rabbitmqctl cluster_status`
